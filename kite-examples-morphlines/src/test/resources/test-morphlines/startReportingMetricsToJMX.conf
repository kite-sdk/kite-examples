# Copyright 2013 Cloudera Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**"]
    
    commands : [  
      { 
        startReportingMetricsToJMX {
          domain : "domain1"
          "durationUnits" : {
            myMetrics.myTimer : milliseconds
            "myMetrics.myTimer2" : milliseconds
            LogDebug.numNotifyCalls : seconds
          }
          "defaultDurationUnit" : seconds
          rateUnits : {
            myMetrics.myTimer : milliseconds
            myMetrics.myTimer2 : minute
            LogDebug.numNotifyCalls : seconds
          }
          defaultRateUnit : seconds
        }
      }
      
      { 
        startReportingMetricsToJMX {
          domain : "domain2"
        }
      }
      
      { 
        startReportingMetricsToJMX {
          domain : "domain1"
        }
      }
      
      { logDebug { format : "output record: {}", args : [ "@{}"] } }    
      { logDebug { format : "output record: {}", args : [ "@{}"] } } 
      
      { java 
        { imports : "import java.util.*;"
          code: """
            // Update some custom metrics - see http://metrics.codahale.com/getting-started/
            context.getMetricRegistry().counter("myMetrics.myCounter").inc(1);
            context.getMetricRegistry().meter("myMetrics.myMeter").mark(1);
            context.getMetricRegistry().histogram("myMetrics.myHistogram").update(100);
            com.codahale.metrics.Timer.Context timerContext = context.getMetricRegistry().timer("myMetrics.myTimer").time();            
            timerContext.stop(); // measure how much time the code block took
            com.codahale.metrics.Timer.Context timerContext2 = context.getMetricRegistry().timer("myMetrics.myTimer2").time();            
            timerContext2.stop(); // measure how much time the code block took
            return child.process(record); // pass record to next command in chain
                """ 
        } 
      }
         
    ]
  }
]
