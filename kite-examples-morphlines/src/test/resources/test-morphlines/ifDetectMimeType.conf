# Copyright 2013 Cloudera Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# this variable can be overriden in flume.conf or MapReduceIndexerTool CLI
MY.MIME_TYPE : myDefault 

# This morphline routes the record to the southpole if it's an avro file,
# otherwise it routes the record to the northpole.
morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.**", "org.apache.solr.**"]

    commands : [
      {
        # auto-detect MIME type if it isn't explicitly supplied
        detectMimeType {
          includeDefaultMimeTypes : true
          mimeTypesFiles : [target/test-classes/custom-mimetypes.xml]
#          mimeTypesString :
#            """
#              <mime-info>
#                <mime-type type="text/space-separated-values">
#                  <glob pattern="*.ssv"/>
#                </mime-type>
#
#                <mime-type type="avro/binary">
#                  <magic priority="50">
#                    <match value="0x4f626a01" type="string" offset="0"/>
#                  </magic>
#                  <glob pattern="*.avro"/>
#                </mime-type>
#
#                <mime-type type="mytwittertest/json+delimited+length">
#                  <magic priority="50">
#                    <match value="[0-9]+(\r)?\n\\{&quot;" type="regex" offset="0:16"/>
#                  </magic>
#                </mime-type>
#              </mime-info>
#            """
        }
      }

      {
        if {
          conditions : [
            { contains { _attachment_mimetype : [${MY.MIME_TYPE}] } }
          ]
          then : [
            { logDebug { format : "found grok match: {}", args : ["@{}"] } }
            { setValues { "flume.selector.header" : goToSouthPole } }
          ]
          else : [
            { logDebug { format : "found no grok match: {}", args : ["@{}"] } }
            { setValues { "flume.selector.header" : goToNorthPole } }
          ]
        }
      }

      { logDebug { format : "output record: {}", args : ["@{}"] } }
    ]
  }
]
